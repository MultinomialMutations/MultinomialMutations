}
if(rev==T)
{
zz<-rep(NA,nchar(x))
for(ccc in (1:nchar(x)))
{
zz[ccc]<-y[nchar(x)+1-ccc]
if(ccc==1) yy<-zz[ccc] else yy<-paste(yy,zz[ccc],sep="")
}
}
return(yy)
}
rev.comp.vec = Vectorize(rev.comp)
rev.comp<-function(x,rev=TRUE)
{
x<-toupper(x)
y<-rep("N",nchar(x))
xx<-unlist(strsplit(x,NULL))
for (bbb in 1:nchar(x))
{
if(xx[bbb]=="A") y[bbb]<-"T"
if(xx[bbb]=="C") y[bbb]<-"G"
if(xx[bbb]=="G") y[bbb]<-"C"
if(xx[bbb]=="T") y[bbb]<-"A"
}
if(rev==FALSE)
{
for(ccc in (1:nchar(x)))
{
if(ccc==1) yy<-y[ccc] else yy<-paste(yy,y[ccc],sep="")
}
}
if(rev==T)
{
zz<-rep(NA,nchar(x))
for(ccc in (1:nchar(x)))
{
zz[ccc]<-y[nchar(x)+1-ccc]
if(ccc==1) yy<-zz[ccc] else yy<-paste(yy,zz[ccc],sep="")
}
}
return(yy)
}
rev.comp.vec = Vectorize(rev.comp)
rev.comp("TTT")
rev.comp(count_table$neighbors)
rev.comp.vec(count_table$neighbors)
count_table = count[1:1000,]
count_table = as.data.table(count_table)
count_table[, sample_id := gsub(pattern = "-+", replacement = "_", x = sample_id)]
count_table[, cancer_type := gsub(pattern = "-..?", replacement = "", x = cancer_type)]
count_table[, sample_id := paste0(cancer_type, "_", sample_id)]
# explanatory variables:
# 1) strong: G:C site
count_table[, strong := 0]
setkey(count_table, ref)
count_table[c("C","G"), strong := 1]
# 2) CpG: (left C & ref G) | (ref C & right G)
count_table[, CpG := 0]
setkey(count_table, left, ref)
count_table[.("C","G"), CpG := 1]
count_table[.("G","C"), CpG := 1]
setkey(count_table, ref, right)
count_table[.("C","G"), CpG := 1]
count_table[.("G","C"), CpG := 1]
# 3) apobec triplets: TCA, TCT, and reverse complements AGA and TGA
setkey(count_table, left, ref, right)
count_table[, apobec:=0]
count_table[.("T", "C", c("A", "T")), apobec:=1]
count_table[.(c("A", "T"), "G", "A"), apobec:=1]
# 4) all left right combinations or their reverse complements (if there is an A or G at the center, the reverse complement is used)
count_table[,neighbors:=paste0(left, right)]
setkey(count_table, ref)
count_table[.(c("A", "G")), neighbors:=rev.comp.vec(neighbors)]
head(count_table)
library("Matrix")
load("/home/johanna/GenomeDK/PCAWG/nullmodel/analysis_model_selection_Fredriksson_whole_genome/multinomutils_testing_package/final_fastmultinom_model3mi1.Rdata")
varvec = diag(final.fast_multinom$VC)
names(varvec) = paste(rep(c("I", "VA", "VG"), each=16160), names(final.fast_multinom$coefficients$I))
varvec.o = varvec[order(varvec, decreasing = T)]
varvec.1000 = varvec.o[varvec.o>1000]
namevec = names(varvec.1000)
mut_type = paste(substr(namevec, 1, 2), ifelse(grepl("strong$", namevec), "strong", "weak")) # all of them
triplet = paste(substr(regmatches(namevec, regexpr("neighbors[A-Z]+", namevec)), 10, 11), ifelse(grepl("strong$", namevec), "strong", "weak")) # all of them
mut_type_triplet = paste(substr(mut_type, 1, 2), triplet) # nearly all of them
cancer_type = regmatches(namevec, regexpr("id[A-Z]+", namevec)) # all of them
sample_id = regmatches(namevec, regexpr("TCGA_[A-Z 0-9 _]+", namevec)) # 200/500
sample_id
table(sample_id)
which.max(table(sample_id))
load("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/missing_summary.Rdata")
missingval
?solve
A = matrix(1:9, 3, 3)
A %*% solve(A)
A = matrix(rnorm(9), 3, 3)
A %*% solve(A)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
load("/home/johanna/GenomeDK/PCAWG/nullmodel/analysis_model_selection_Fredriksson_whole_genome/multinomutils_testing_package/finalpooledmodel1mi3.Rdata")
str(pooled.fit)
pooled.fit$VC
pooled.fit$VC[1:5,1:5]
library(Matrix)
image(pooled.fit)
image(pooled.fit$VC)
load("/home/johanna/GenomeDK/PCAWG/nullmodel/analysis_model_selection_Fredriksson_whole_genome/multinomutils_testing_package/final_fastmultinom_model1mi1.Rdata")
image(final.fast_multinom$VC)
load("/home/johanna/GenomeDK/PCAWG/nullmodel/analysis_model_selection_Fredriksson_whole_genome/multinomutils_testing_package/final_fastmultinom_model1mi2.Rdata")
image(final.fast_multinom$VC)
load("/home/johanna/GenomeDK/PCAWG/nullmodel/analysis_model_selection_Fredriksson_whole_genome/multinomutils_testing_package/final_fastmultinom_model1mi3.Rdata")
image(final.fast_multinom$VC)
range(final.fast_multinom$VC)
range(pooled.fit$VC)
is.missing(1:10)
is.na(1:10)
matrix(1:9, 3, 3)
A = matrix(1:9, 3, 3)
is.missing(A)
is.na(A)
A = as.data.frame(A)
is.na(A)
is.na(A)*1:3
cv=5
m=3
datafolder="~GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/Cgi/"
datafolder="~/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/Cgi/"
datafile="count"
impfolder="imputed_multinom/"
library("multinomutils")
getwd()
i=1
chrom21 = read.table(file=paste0(datafolder, datafile, i-1, ".txt"), header = T, as.is=T)
chrom21.imp = count_table_prep_multinom(chrom21, m)
library("data.table")
chrom21.imp = count_table_prep_multinom(chrom21, m)
library("devtools")
source('~/.active-rstudio-document', echo=TRUE)
table(sample_id)
rm(list=ls())
x = read.table("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/imp1.txt", header=T)
library(data.table)
if(!is.null(reference)){stop("Using a different reference data frame than 'x' is currently not implemented. Set 'reference=NULL'.")}
if(any(c("cancer_type", "sample_id") %in% categorical)){stop("The vector 'categorical' should not include cancer_type and sample_id, because they are used in a different way.")}
x = as.data.table(x)
categorical=c("strong", "neighbors")
make.integers=F
setkeyv(x, c("sample_id", categorical))
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("sample_id", categorical)]
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
cat.sum
# remove the sum columns
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
x.new = x[cat.sum]
x.new
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), newYES = length(I)), by=c("sample_id", categorical)]
cat.sum
hist(cat.sum$newYES)
range(cat.sum$newYES)
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I)), by=c("sample_id", categorical)]
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
x.new = x[cat.sum]
x.new
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I), usecontrib = ifelse(sum(YES)>0, 0, 1), by=c("sample_id", categorical)]
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I), usecontrib = ifelse(sum(YES)>0, 0, 1)), by=c("sample_id", categorical)]
cat.sum
cat.sum[,zero==T]
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
cat.sum[,zero==T]
cat.sum[zero==T,]
cat.sum[list(zero==T, usecontrib==1),]
table(cat.sum(use.contrib))
table(cat.sum$usecontrib)
cat.sum[usecontrib==1,]
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
x.new = x[cat.sum]
x.new = x[cat.sum]
# prepare the reference dataset
all.names = names(x)[-which(names(x) %in% c("sample_id", "cancer_type", "NO", "I", "VA", "VG", "YES"))]
setkeyv(x.new, c("cancer_type", all.names))
reference = x.new[,list(sumNO = sum(NO), sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("cancer_type", all.names)]
x.joined = x.new[reference]
x.joined
reference = x.new[,list(sumYES = sum(YES), sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("cancer_type", all.names)]
x.joined = x.new[reference]
x.joined[,sumI:= sumI*(YES*((1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined[,sumI:= sumI*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined[,sumVA:= sumVA*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined[,sumVG:= sumVG*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined
# add the pseudo counts
if(!make.integers){
x.joined[,I:=as.numeric(I)]
x.joined[,VA:=as.numeric(VA)]
x.joined[,VG:=as.numeric(VG)]
# this is necessary, because they were integer columns. Assigning them non-integer values just cuts what's after the comma (stupid data.table problem).
x.joined[zero==T, I:= (I + sumI)/2]
x.joined[zero==T, VA:= (VA + sumVA)/2]
x.joined[zero==T, VG:= (VG + sumVG)/2]
} else {
x.joined[zero==T, I:= ceiling((I + sumI)/2)]
x.joined[zero==T, VA:= ceiling((VA + sumVA)/2)]
x.joined[zero==T, VG:= ceiling((VG + sumVG)/2)]
}
x.joined[,c("sumYES", "sumI", "sumVA", "sumVG", "contrib", "usecontrib"):=NULL]
x.joined[,YES:=I + VA + VG]
x.joined
x = read.table("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/imp1.txt", header=T)
newx = add_counts_pres_mut(x, categorical=c("strong", "neighbors"), make.integers=F)
write.table(newx, quote=F, row.names=F, "/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/testprior/1/imp1.txt")
x02 = x[x$sample_id=="GBM_TCGA_02_2483_01A" & x$strong==1 & x$neighbors=="TG",]
newx02 = newx[newx$sample_id=="GBM_TCGA_02_2483_01A" & newx$strong==1 & newx$neighbors=="TG",]
sum(x02$YES)
sum(newx02$YES)
colSums(x02[,10:13])/sum(colSums(x02[,10:13]))
colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG)))
colSums(x02[,c(10, 12, 13)])/sum(colSums(x02[,c(10, 12, 13)]))
colSums(cbind(newx02$I, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$VA, newx02$VG)))
add_counts_pres_mut = function(x, reference = NULL, categorical, make.integers = F){
if(!is.null(reference)){stop("Using a different reference data frame than 'x' is currently not implemented. Set 'reference=NULL'.")}
if(any(c("cancer_type", "sample_id") %in% categorical)){stop("The vector 'categorical' should not include cancer_type and sample_id, because they are used in a different way.")}
x = as.data.table(x)
# set key to categorical variables
setkeyv(x, c("sample_id", categorical))
# compute sum of mutations for each category
# compute "contrib", how much each combination c_1 x ... x c_n x v_1 x ... x x_m x sample_id contributes to the combination c_1 x ... x c_n at hand (i e 1/(number of combinations v_1 x ... x x_m x sample_id))
# compute "usecontrib": For the scaling to the number of observed mutations, should the actually observed mutations be used (only if there are any in the combination c_1 x ... x c_n x sample_id) => usecontrib==0; or should a single mutation be added with equal contribution to each of the categories c_1 x ... x c_n x v_1 x ... x x_m x sample_id.
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I), usecontrib = ifelse(sum(YES)>0, 0, 1)), by=c("sample_id", categorical)]
# find out if the minimal count is zero
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
# remove the sum columns
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
# add the columns zero, contrib and usecontrib to the data.table x
x.new = x[cat.sum]
# ################### exit if there is nothing to do and return x.new, because it contains the new column zero ########################
# prepare the reference dataset
all.names = names(x)[-which(names(x) %in% c("sample_id", "cancer_type", "NO", "I", "VA", "VG", "YES"))]
setkeyv(x.new, c("cancer_type", all.names))
reference = x.new[,list(sumYES = sum(YES), sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("cancer_type", all.names)]
# join the reference dataset onto x.new
x.joined = x.new[reference]
### adjust number of mutations
# adjust the sum columns such that the total mutation count is not more than within the sample (or only 1 more if there is no mutation in the sample ... see above)
x.joined[,sumI:= sumI*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined[,sumVA:= sumVA*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
x.joined[,sumVG:= sumVG*(YES*(1-usecontrib) + contrib*usecontrib)/sumYES]
# add the pseudo counts
if(!make.integers){
x.joined[,I:=as.numeric(I)]
x.joined[,VA:=as.numeric(VA)]
x.joined[,VG:=as.numeric(VG)]
# this is necessary, because they were integer columns. Assigning them non-integer values just cuts what's after the comma (stupid data.table problem).
x.joined[zero==T, I:= (I + sumI)/2]
x.joined[zero==T, VA:= (VA + sumVA)/2]
x.joined[zero==T, VG:= (VG + sumVG)/2]
} else {
x.joined[zero==T, I:= ceiling((I + sumI)/2)]
x.joined[zero==T, VA:= ceiling((VA + sumVA)/2)]
x.joined[zero==T, VG:= ceiling((VG + sumVG)/2)]
}
# (dividing by 2 is not really necessary for the multinomial regression, but if the raw counts in the dataset are also used for some kinds of analyses, this makes sure that they are approximately the same as originally.)
# remove superfluous columns
x.joined[,c("sumYES", "sumI", "sumVA", "sumVG", "contrib", "usecontrib"):=NULL]
# add the column YES
x.joined[,YES:=I + VA + VG]
return(x.joined)
}
x = read.table("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/imp1.txt", header=T)
newx = add_counts_pres_mut(x, categorical=c("strong", "neighbors"), make.integers=F)
write.table(newx, quote=F, row.names=F, "/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/testprior/1/imp1.txt")
x02 = x[x$sample_id=="GBM_TCGA_02_2483_01A" & x$strong==1 & x$neighbors=="TG",]
newx02 = newx[newx$sample_id=="GBM_TCGA_02_2483_01A" & newx$strong==1 & newx$neighbors=="TG",]
sum(x02$YES)
sum(newx02$YES)
colSums(x02[,10:13])/sum(colSums(x02[,10:13]))
colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG)))
colSums(x02[,c(10, 12, 13)])/sum(colSums(x02[,c(10, 12, 13)]))
colSums(cbind(newx02$I, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$VA, newx02$VG)))
head(newx02)
length(newx02$YES)
newx02$YES
newx02$I
1/0
0/0
newx02
add_counts_pres_mut = function(x, reference = NULL, categorical, make.integers = F){
if(!is.null(reference)){stop("Using a different reference data frame than 'x' is currently not implemented. Set 'reference=NULL'.")}
if(any(c("cancer_type", "sample_id") %in% categorical)){stop("The vector 'categorical' should not include cancer_type and sample_id, because they are used in a different way.")}
x = as.data.table(x)
# set key to categorical variables
setkeyv(x, c("sample_id", categorical))
# compute sum of mutations for each category
# compute "contrib", how much each combination c_1 x ... x c_n x v_1 x ... x x_m x sample_id contributes to the combination c_1 x ... x c_n at hand (i e 1/(number of combinations v_1 x ... x x_m x sample_id))
# compute "usecontrib": For the scaling to the number of observed mutations, should the actually observed mutations be used (only if there are any in the combination c_1 x ... x c_n x sample_id) => usecontrib==0; or should a single mutation be added with equal contribution to each of the categories c_1 x ... x c_n x v_1 x ... x x_m x sample_id.
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I), usecontrib = ifelse(sum(YES)>0, 0, 1)), by=c("sample_id", categorical)]
# find out if the minimal count is zero
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
# remove the sum columns
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
# add the columns zero, contrib and usecontrib to the data.table x
x.new = x[cat.sum]
# ################### exit if there is nothing to do and return x.new, because it contains the new column zero ########################
# prepare the reference dataset
all.names = names(x)[-which(names(x) %in% c("sample_id", "cancer_type", "NO", "I", "VA", "VG", "YES"))]
setkeyv(x.new, c("cancer_type", all.names))
reference = x.new[,list(sumYES = sum(YES), sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("cancer_type", all.names)]
# join the reference dataset onto x.new
x.joined = x.new[reference]
### adjust number of mutations
# adjust the sum columns such that the total mutation count is not more than within the sample (or only 1 more if there is no mutation in the sample ... see above)
# make sure to avoid division by 0
factor = (YES*(1-usecontrib) + contrib*usecontrib)/ifelse(sumYES==0, 1, sumYES)
x.joined[,sumI:= sumI*factor]
x.joined[,sumVA:= sumVA*factor]
x.joined[,sumVG:= sumVG*factor]
# add the pseudo counts
if(!make.integers){
x.joined[,I:=as.numeric(I)]
x.joined[,VA:=as.numeric(VA)]
x.joined[,VG:=as.numeric(VG)]
# this is necessary, because they were integer columns. Assigning them non-integer values just cuts what's after the comma (stupid data.table problem).
x.joined[zero==T, I:= (I + sumI)/2]
x.joined[zero==T, VA:= (VA + sumVA)/2]
x.joined[zero==T, VG:= (VG + sumVG)/2]
} else {
x.joined[zero==T, I:= ceiling((I + sumI)/2)]
x.joined[zero==T, VA:= ceiling((VA + sumVA)/2)]
x.joined[zero==T, VG:= ceiling((VG + sumVG)/2)]
}
# (dividing by 2 is not really necessary for the multinomial regression, but if the raw counts in the dataset are also used for some kinds of analyses, this makes sure that they are approximately the same as originally.)
# remove superfluous columns
x.joined[,c("sumYES", "sumI", "sumVA", "sumVG", "contrib", "usecontrib"):=NULL]
# add the column YES
x.joined[,YES:=I + VA + VG]
return(x.joined)
}
x = read.table("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/imp1.txt", header=T)
newx = add_counts_pres_mut(x, categorical=c("strong", "neighbors"), make.integers=F)
write.table(newx, quote=F, row.names=F, "/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/testprior/1/imp1.txt")
x02 = x[x$sample_id=="GBM_TCGA_02_2483_01A" & x$strong==1 & x$neighbors=="TG",]
newx02 = newx[newx$sample_id=="GBM_TCGA_02_2483_01A" & newx$strong==1 & newx$neighbors=="TG",]
sum(x02$YES)
sum(newx02$YES)
colSums(x02[,10:13])/sum(colSums(x02[,10:13]))
colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG)))
colSums(x02[,c(10, 12, 13)])/sum(colSums(x02[,c(10, 12, 13)]))
colSums(cbind(newx02$I, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$VA, newx02$VG)))
add_counts_pres_mut = function(x, reference = NULL, categorical, make.integers = F){
if(!is.null(reference)){stop("Using a different reference data frame than 'x' is currently not implemented. Set 'reference=NULL'.")}
if(any(c("cancer_type", "sample_id") %in% categorical)){stop("The vector 'categorical' should not include cancer_type and sample_id, because they are used in a different way.")}
x = as.data.table(x)
# set key to categorical variables
setkeyv(x, c("sample_id", categorical))
# compute sum of mutations for each category
# compute "contrib", how much each combination c_1 x ... x c_n x v_1 x ... x x_m x sample_id contributes to the combination c_1 x ... x c_n at hand (i e 1/(number of combinations v_1 x ... x x_m x sample_id))
# compute "usecontrib": For the scaling to the number of observed mutations, should the actually observed mutations be used (only if there are any in the combination c_1 x ... x c_n x sample_id) => usecontrib==0; or should a single mutation be added with equal contribution to each of the categories c_1 x ... x c_n x v_1 x ... x x_m x sample_id.
cat.sum = x[,list(sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG), contrib = 1/length(I), usecontrib = ifelse(sum(YES)>0, 0, 1)), by=c("sample_id", categorical)]
# find out if the minimal count is zero
cat.sum[, zero:= (sumI == 0) | (sumVA == 0) | (sumVG == 0)]
# remove the sum columns
cat.sum[, sumI:= NULL]
cat.sum[, sumVA:= NULL]
cat.sum[, sumVG:= NULL]
# add the columns zero, contrib and usecontrib to the data.table x
x.new = x[cat.sum]
# ################### exit if there is nothing to do and return x.new, because it contains the new column zero ########################
# prepare the reference dataset
all.names = names(x)[-which(names(x) %in% c("sample_id", "cancer_type", "NO", "I", "VA", "VG", "YES"))]
setkeyv(x.new, c("cancer_type", all.names))
reference = x.new[,list(sumYES = sum(YES), sumI = sum(I), sumVA = sum(VA), sumVG = sum(VG)), by=c("cancer_type", all.names)]
# join the reference dataset onto x.new
x.joined = x.new[reference]
### adjust number of mutations
# adjust the sum columns such that the total mutation count is not more than within the sample (or only 1 more if there is no mutation in the sample ... see above)
# make sure to avoid division by 0
x.joined[,factor:= (YES*(1-usecontrib) + contrib*usecontrib)/ifelse(sumYES==0, 1, sumYES)]
x.joined[,sumI:= sumI*factor]
x.joined[,sumVA:= sumVA*factor]
x.joined[,sumVG:= sumVG*factor]
# add the pseudo counts
if(!make.integers){
x.joined[,I:=as.numeric(I)]
x.joined[,VA:=as.numeric(VA)]
x.joined[,VG:=as.numeric(VG)]
# this is necessary, because they were integer columns. Assigning them non-integer values just cuts what's after the comma (stupid data.table problem).
x.joined[zero==T, I:= (I + sumI)/2]
x.joined[zero==T, VA:= (VA + sumVA)/2]
x.joined[zero==T, VG:= (VG + sumVG)/2]
} else {
x.joined[zero==T, I:= ceiling((I + sumI)/2)]
x.joined[zero==T, VA:= ceiling((VA + sumVA)/2)]
x.joined[zero==T, VG:= ceiling((VG + sumVG)/2)]
}
# (dividing by 2 is not really necessary for the multinomial regression, but if the raw counts in the dataset are also used for some kinds of analyses, this makes sure that they are approximately the same as originally.)
# remove superfluous columns
x.joined[,c("sumYES", "sumI", "sumVA", "sumVG", "contrib", "usecontrib", "factor"):=NULL]
# add the column YES
x.joined[,YES:=I + VA + VG]
return(x.joined)
}
x = read.table("/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/1/imp1.txt", header=T)
newx = add_counts_pres_mut(x, categorical=c("strong", "neighbors"), make.integers=F)
write.table(newx, quote=F, row.names=F, "/home/johanna/GenomeDK/PCAWG/faststorage/count_data_Fredriksson_whole_genome/combine/imputed_package_multinom_all/testprior/1/imp1.txt")
x02 = x[x$sample_id=="GBM_TCGA_02_2483_01A" & x$strong==1 & x$neighbors=="TG",]
newx02 = newx[newx$sample_id=="GBM_TCGA_02_2483_01A" & newx$strong==1 & newx$neighbors=="TG",]
sum(x02$YES)
sum(newx02$YES)
colSums(x02[,10:13])/sum(colSums(x02[,10:13]))
colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$NO, newx02$VA, newx02$VG)))
colSums(x02[,c(10, 12, 13)])/sum(colSums(x02[,c(10, 12, 13)]))
colSums(cbind(newx02$I, newx02$VA, newx02$VG))/sum(colSums(cbind(newx02$I, newx02$VA, newx02$VG)))
library("data.table")
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/small_dataprep_functions.R', echo=TRUE)
location = "./inst/extdata/chr21_count0_1000.txt"
count = read.table(file=location, header = T, as.is=T)
getwd()
location = "../inst/extdata/chr21_count0_1000.txt"
count = read.table(file=location, header = T, as.is=T)
count.imp = count_table_prep_multinom(count[1:1000,], 2)
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/count_table_prep_multinom.R', echo=TRUE)
count.imp = count_table_prep_multinom(count[1:1000,], 2)
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/multiple_imputation.R', echo=TRUE)
count.imp = count_table_prep_multinom(count[1:1000,], 2)
library("plyr")
library("data.table")
count.imp = count_table_prep_multinom(count[1:1000,], 2)
?data.table
?"plyr"
?dcast
library("reshape2")
count.imp = count_table_prep_multinom(count[1:1000,], 2)
count.imp
count_table = count
count_table = as.data.table(count_table)
count_table[, sample_id := gsub(pattern = "-+", replacement = "_", x = sample_id)]
count_table[, cancer_type := gsub(pattern = "-..?", replacement = "", x = cancer_type)]
count_table[, sample_id := paste0(cancer_type, "_", sample_id)]
if(strong){
count_table[, strong := 0]
setkey(count_table, from)
count_table[c("C","G"), strong := 1]
}
strong=T
CpG=T
apobec=T
neighbors=T
if(strong){
count_table[, strong := 0]
setkey(count_table, from)
count_table[c("C","G"), strong := 1]
}
# 2) CpG: (left C & ref G) | (ref C & right G)
if(CpG){
count_table[, CpG := 0]
setkey(count_table, left, from)
count_table[.("C","G"), CpG := 1]
setkey(count_table, from, right)
count_table[.("C","G"), CpG := 1]
}
# 3) apobec triplets: TCA, TCT, and reverse complements AGA and TGA
if(apobec){
setkey(count_table, left, from, right)
count_table[, apobec:=0]
count_table[.("T", "C", c("A", "T")), apobec:=1]
count_table[.(c("A", "T"), "G", "A"), apobec:=1]
}
# 4) all left right combinations or their reverse complements (if there is an A or G at the center, the reverse complement is used)
if(neighbors){
left.right.neighbors(dataset = count_table, reference_column_id = "from", left_column_id = "left", right_column_id = "right")
}
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/count_table_prep_multinom.R', echo=TRUE)
count.imp = count_table_prep_multinom(count[1:1000,], 2)
?if
?("if")
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/small_dataprep_functions.R', echo=TRUE)
source('~/GenomeDK/PCAWG/nullmodel/R_scripts/multinomutils/R/count_table_prep_multinom.R', echo=TRUE)
count = read.table(file=location, header = T, as.is=T)
count_table = count
count_table = as.data.table(count_table)
set.sample.id(dat = count_table, sample_id_column = "sample_id", cancer_type_id_column = "cancer_type", data_source = data_source)
data_source="fredriksson"
set.sample.id(dat = count_table, sample_id_column = "sample_id", cancer_type_id_column = "cancer_type", data_source = data_source)
count.imp = count_table_prep_multinom(count[1:1000,], 2)
count.imp
count_table = count
head(count)
count_table = as.data.table(count_table)
set.sample.id(dat = count_table, sample_id_column = "sample_id", cancer_type_id_column = "cancer_type", data_source = data_source)
count_table[,sample_id_original:=NULL]
count_table
?load
library("multinomutils")
count.raw = readRDS(set0, file=location)
location = system.file("extdata", "set0.Rdata", package = "multinomutils")
location = system.file("extdata", "set0", package = "multinomutils")
count.raw = readRDS(set0, file="/home/johanna/Documents/ThemenAarhus/CancerDriversMutations/R_packages_devel/MultinomialMutations/inst/extdata/set0.Rdata")
load("/home/johanna/Documents/ThemenAarhus/CancerDriversMutations/R_packages_devel/MultinomialMutations/inst/extdata/set0.Rdata")
count.raw = readRDS(file=location)
count.raw = load(file=location)
